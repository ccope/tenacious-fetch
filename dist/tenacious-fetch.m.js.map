{"version":3,"file":"tenacious-fetch.m.js","sources":["../src/index.js"],"sourcesContent":["const ONE_SECOND = 1000\nlet browserFetch = false\n\ntry {\n  browserFetch = window && window.fetch\n} catch (error) {}\n\nfunction tenaciousFetch (url = '', config = {}) {\n  config = Object.assign({\n    retries: 1,\n    retryDelay: ONE_SECOND,\n    retryStatus: [],\n    fetcher: browserFetch,\n    timeout: undefined\n  }, config)\n\n  let {retries, retryDelay, retryStatus, fetcher, timeout} = config\n\n  if (!fetcher || typeof fetcher !== 'function') {\n    throw new Error(\n      'tenacious-fetch: No fetch implementation found. Provide a valid fetch implementation via the fetcher configuration property.'\n    )\n  }\n\n  if (typeof retryStatus === 'string') {\n    retryStatus = [retryStatus]\n  }\n\n  function retryingFetch (retries, url, config) {\n    let retriesLeft = retries\n\n    return new Promise((resolve, reject) => {\n      function fetchAttempt () {\n        fetcher(url, config)\n          .then(res => {\n            if (retryStatus.includes(res.status)) {\n              if (retriesLeft > 0) {\n                retry()\n              } else {\n                reject(res)\n              }\n            } else {\n              resolve(res)\n            }\n          })\n          .catch(error => {\n            if (retriesLeft > 0) {\n              retry()\n            } else {\n              reject(error)\n            }\n          })\n      }\n\n      function retry () {\n        retriesLeft--\n        setTimeout(fetchAttempt, retryDelay)\n      }\n\n      fetchAttempt(retries)\n    })\n  }\n\n  if (timeout && Number.isInteger(timeout)) {\n    return Promise.race([\n      retryingFetch(retries, url, config),\n      new Promise((resolve, reject) =>\n        setTimeout(\n          () =>\n            reject(\n              new Error(\n                `tenacious-fetch: Request took longer than timeout of ${timeout} ms.`\n              )\n            ),\n          timeout\n        )\n      )\n    ])\n  }\n\n  return retryingFetch(retries, url, config)\n}\n\nexport default tenaciousFetch\n"],"names":["const","ONE_SECOND","browserFetch","window","fetch","error","url","config","retries","Object","assign","retryDelay","retryStatus","fetcher","timeout","undefined","Error","retryingFetch","let","retriesLeft","Promise","resolve","reject","fetchAttempt","then","res","includes","status","retry","catch","setTimeout","Number","isInteger","race"],"mappings":"AAAAA,IAAMC,EAAa,IACfC,GAAe,EAEnB,IACEA,EAAeC,QAAUA,OAAOC,YACzBC,mBAET,SAAyBC,EAAUC,kBAAJ,uBAS7B,IAAKC,GARLD,EAASE,OAAOC,QACdF,QAAS,EACTG,WAAYV,EACZW,eACAC,QAASX,EACTY,aAASC,GACRR,YAEWI,eAAYC,gBAAaC,YAASC,YAEhD,IAAKD,GAA8B,mBAAZA,EACrB,MAAM,IAAIG,MACR,gIAQJ,SAASC,EAAeT,EAASF,EAAKC,GACpCW,IAAIC,EAAcX,EAElB,OAAO,IAAIY,iBAASC,EAASC,GAC3B,SAASC,IACPV,EAAQP,EAAKC,GACViB,cAAKC,GACAb,EAAYc,SAASD,EAAIE,QACvBR,EAAc,EAChBS,IAEAN,EAAOG,GAGTJ,EAAQI,KAGXI,eAAMxB,GACDc,EAAc,EAChBS,IAEAN,EAAOjB,KAKf,SAASuB,IACPT,IACAW,WAAWP,EAAcZ,GAG3BY,MAIJ,MAvC2B,iBAAhBX,IACTA,GAAeA,IAsCbE,GAAWiB,OAAOC,UAAUlB,GACvBM,QAAQa,MACbhB,EAAcT,EAASF,EAAKC,GAC5B,IAAIa,iBAASC,EAASC,UACpBQ,6BAEIR,EACE,IAAIN,8DACsDF,YAG9DA,OAMDG,EAAcT,EAASF,EAAKC"}